#PerlySense Project Config

#What's this all about? See: http://search.cpan.org/dist/Devel-PerlySense/

project:

  #The human readable name of the Project
  moniker: 'X-Tracker'

  #Extra @INC directories, relative to the project root
  #These come before the default inc directories "." and "lib"
  inc_dir:
    - "lib_dynamic"
    - "t/lib"
    - "t/20-units/class"
    - "t/30-aspects/class"
    - "t/70-mech-unit/class"


#Bookmarks are regexes that may match against a single line.
#
#The "rex" is either a qr regex declaration, or an array ref of
#regexes (any of them could match to make a bookmark for the line).
#
#The line, or $1 if captured, is displayed.
bookmark:
  -
    moniker: Todo
    rex:
      - "qr/\# \s* TODO \s* : \s* (.+?) \s*$/x"


external:
  editor:

    #Emacs specific configuration
    emacs:

      #To enable flymake in Emacs, configure this in your .emacs file
      #(setq perly-sense-load-flymake t)
      #
      #For more details, settings and colors, see:
      #http://search.cpan.org/dist/Devel-PerlySense/lib/Devel/PerlySense.pm#Emacs_installation
      #
      flymake:

        #During a flymake compilation, perly_sense can run:

        #Check Syntax (perl -c)
        #
        #!!!NOTE!!!
        #   Running perl -c on random Perl code will execute
        #   the BEGIN blocks! Any funny business in them and you're toast!
        #!!!NOTE!!!
        syntax: 1

        #Perl Critic
        #PerlySense will point Critic to a .perlcritic file in this
        #directory. A default config file with fairly lenient rules is
        #provided.
        critic: 1
        critic_options:
          severity: stern



#These are evaluated in order to find a way to run a file. First
#match is used.
run_file:

  -
    command: "nap-dev-prove --nocolor -v -m --normalize --timer ${INC} `cat \"${SOURCE_FILE}\" | xargs`"
    alternate_command: "nap-dev-app-start && nap-dev-prove --nocolor -v -m --normalize --timer ${INC} `cat \"${SOURCE_FILE}\" | xargs`"
    moniker: Multiple Tests
    rex: \.tests$
    run_from: source_root_directory
  -
    command: "nap-dev-prove \"${SOURCE_FILE}\" --nocolor -v -m --normalize --timer ${INC}"
    alternate_command: "nap-dev-app-start && nap-dev-prove \"${SOURCE_FILE}\" --nocolor -v -m --normalize --timer ${INC}"
    moniker: Test
    rex: \.t$
    run_from: source_root_directory
  -
    command: "nap-dev-prove \"${SOURCE_FILE}\" --nocolor -v -m --normalize --timer ${INC}"
    alternate_command: "nap-dev-app-start && nap-dev-prove \"${SOURCE_FILE}\" --nocolor -v -m --normalize --timer ${INC}"
    moniker: Unit Test
    rex: t/20-units/class/Test
    run_from: source_root_directory
  -
    command: "nap-dev-prove \"${SOURCE_FILE}\" --nocolor -v -m --normalize --timer ${INC}"
    alternate_command: "nap-dev-app-start && nap-dev-prove \"${SOURCE_FILE}\" --nocolor -v -m --normalize --timer ${INC}"
    moniker: Functional Test
    rex: t/30-functional/(\w+/)?class/Test
    run_from: source_root_directory
  -
    command: "nap-dev-prove \"${SOURCE_FILE}\" --nocolor -v -m --normalize --timer ${INC}"
    alternate_command: "nap-dev-app-start && nap-dev-prove \"${SOURCE_FILE}\" --nocolor -v -m --normalize --timer ${INC}"
    moniker: External tests
    rex: t/40-external/class/Test
    run_from: source_root_directory
  -
    command: "perl -c ${INC} \"${SOURCE_FILE}\" 2>&1| perl -ne \"/Subroutine \w+ redefined at/ or print\""
    moniker: Module
    rex: \.pm$
    run_from: source_root_directory
  -
    command: "perl ${INC} \"${SOURCE_FILE}\""
    moniker: Script
    rex: \.pl$
    run_from: file_directory

  #This is a catch-all for all other types of files
  -
    command: "perl ${INC} \"${SOURCE_FILE}\""
    moniker: 'Script (no .pl)'
    rex: .
    run_from: file_directory



#These are evaluated in order to find a way to debug a file. First
#match is used.
debug_file:
  -
    command: "perl -d ${INC} \"${SOURCE_FILE}\""
    moniker: Test
    rex: \.t$
    debug_from: source_root_directory
  -
    command: "perl -d ${INC} \"${SOURCE_FILE}\""
    moniker: Script
    rex: \.pl$
    debug_from: file_directory

  -
    command: "perl -d ${INC} \"${SOURCE_FILE}\""
    moniker: Module
    rex: \.pm$
    debug_from: source_root_directory

  #This is a catch-all for all other types of files
  -
    command: "perl -d ${INC} \"${SOURCE_FILE}\""
    moniker: 'Script (no .pl)'
    rex: .
    debug_from: file_directory




#EOF
