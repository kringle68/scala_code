<script type='text/javascript'>

// Non-horrible alert box
$.extend({ alert: function (message, title, callback) {
    callback = typeof callback === typeof Function ?
        callback : function(x){return x};
    $("<div></div>").dialog( {
        buttons: { "Ok": function () { $(this).dialog("close"); } },
        close: function (event, ui) { $(this).remove(); callback(); },
        resizable: false,
        title: title,
        modal: true
    }).text(message);
    }});

function DataTable( id,
                    name,
                    service,
                    method,
                    headers,
                    column_map,
                    classes,
                    editables,
                    transform,
                    validate) {

    this.id = id;
    this.name = name;
    this.service = service;
    this.method = method;
    this.headers = headers;
    this.column_map = column_map;
    this.classes = typeof classes === typeof String() ? classes : '';
    // editables and transform default to
    // the empty array and identity function respectively
    this.editables = editables instanceof Array ? editables : [];

    // identity function
    var identity = function(x) { return x; };

    this.transform = typeof transform === typeof Function ? transform : identity;
    this.validate = typeof validate === typeof Function ? validate : identity;

    this.data = {};
    this.available = false;

    var self = this;

    this.element = $("<table />");
    this.element.attr('class', this.classes);
    this.element.append( function() {
        var header = $("<thead />").append( function() {
            var i, row = $("<tr />");
                for (i in self.headers) {
                    row.append($("<th />").text(self.headers[i]));
                }
                if (self.editables.length > 0) {
                    row.append($("<th />").text('Edit'));
                };
            return row;
        });
        return header;
    });

    this.renderBody = function() { // Remove and re-render table body
        var i, j, rowdata, value, value_container, tr, td, body = $("<tbody />");

        for (i in self.data) {
            rowdata = self.transform(self.data[i]);
            tr = $("<tr />");
            tr.attr('rowid', i);
            for (j in self.headers) {
                td = $("<td />");

                td.attr({
                    'colname': self.headers[j],
                    'colid'  : self.column_map[ self.headers[j] ]
                });
                value = self.data[i][ self.column_map[ self.headers[j] ] ];
                value = value != null ? value : "-";

                td.append( $("<span />").text(value) );

                td.html(value_container);
                tr.append(td);
            }
            // Edit column if any fields are editable
            if (self.editables.length > 0) {
                tr.append(function() {
                    td = $("<td />");
                    td.addClass("editcolumn");
                    return td;
                });
            }

            body.append(tr);
        }

        self.element.children("tbody").remove();
        self.element.append(body);
        // Make edit buttons where necessary
        $(self.element).find('tr[rowid]').each( function() {
            self.editButton($(this).attr('rowid'));
        });
    }

    // reset all non-submitted edits to their original value
    this.resetEdits = function() {
        var table = $(self.element);
        table.find('.editfield').each( function() {
            var field = $(this);
            var original_value = $("<span />").text(field.attr('oldvalue'));
            field.replaceWith(original_value);
        })
        // Reset edit buttons as well
        table.find("tr").each( function() {
            self.editButton($(this).attr('rowid'));
        });
    }

    // Methods for manipulating a row's edit controls

    // Replace the edit column's content with an edit button
    this.editButton = function(rowid) {
        var row = $(self.element).find("tr[rowid='" + rowid  + "']:first");
        row.find('.editcolumn').children().remove();
        row.find('.editcolumn').append( function() {
            var button = $("<img />");
            button.attr('src', '/images/icons/pencil.png');
            button.addClass('editbutton');
            button.on('click', function() {
                if(self.available) {
                    self.editRow(rowid);
                }
            });
            return button;
        });
    }

    // Replace the edit column's contents with 'submit' and 'cancel'
    this.editControls = function(rowid) {
        var row = $(self.element).find("tr[rowid='" + rowid  + "']:first");
        row.find('.editcolumn').children().remove();
        row.find('.editcolumn').append( function() {
            var submit = $("<img />").attr('src','/images/icons/tick.png');
            submit.addClass('submitbutton');
            submit.on('click', function() { self.submit(rowid) });
            submit.css({'cursor': 'pointer'});
            var cancel = $("<img />").attr('src','/images/icons/cross.png');
            cancel.addClass('cancelbutton');
            cancel.on('click', self.resetEdits);
            cancel.css({'cursor': 'pointer'});
            return submit.add(cancel);
        });
    }

    // Replace the edit column's contents with a throbber
    this.editThrob = function(rowid) {
        var row = $(self.element).find("tr[rowid='" + rowid  + "']:first");
        row.find('.editcolumn').children().remove();
        row.find('.editcolumn').append( function() {
            return $("<img />").attr('src', '/images/ajax-loader.gif');
        });
    }

    // Make row editable
    this.editRow = function(rowid) {

        // Get a unique row with the desired id
        var row = $(self.element).find("tr[rowid='" + rowid  + "']:first");

        self.resetEdits();
        // Iterate through cells and transform them if they're 'editable'
        row.children('td').each( function() {
            var field, cell = $(this);
            if (self.editables.indexOf(cell.attr('colname')) > -1) {
                field = $('<input />');
                field.attr('type', 'text');
                field.attr('id', cell.attr('colid'));
                field.addClass('editfield');
                field.attr('oldvalue', cell.children("span:first").text());
                field.val(cell.children("span:first").text());
                cell.children('span').replaceWith(field);
            }
        });

        self.editControls(rowid);
    }

    // Assemble edit fields into a POST request and send it
    this.submit = function(rowid) {
        var validator, params = { 'id': rowid };

        var fields = $(self.element).find('input')

        // Extract field values
        fields.each(function() {
            var input = $(this);
            params[ input.attr('id') ] = input.val();
        });


        // validate / transform parameters
        validator = self.validate(params);
        if (validator[0] == false) {
            $.alert(validator[1], "invalid input values");
            return false;  // Kill the submission if it's invalid
        } else {
            params = validator[1];
        }

        // After this point, field values are considered valid

        fields.each(function(){
            $(this).attr('readonly', '');
        });

        self.editThrob(rowid);
        // make table noninteractive until it's updated
        self.available = false;

        $.post(self.service + self.method, params, function(data) {
            self.fetch();
        }, 'json').error( function(e) {
            var response;
            // if the user isn't authenticated, alert and reload the page
            if (e.status === 401) {
                $.alert("Your session seems to have timed out. \
                You will now be redirected to the login page",
                "Authentication Failure", function() {
                    location.reload();
                });
            }

            try {
                response = JSON.parse(e.responseText);
            }
            catch (err) {
                response = {
                    responseText : "not given"
                }
            };
            if (typeof response.error !== "undefined") {
                $.alert(response.error, "Submission failure");
            } else {
                $.alert("Something went wrong on the server. \
                the response status was " + e.statusText, "Server Error");
            }

            // Reload the table
            self.fetch();
        });


    }

    this.onUpdate = function(data) { // Runs whenever new data is fetched
        self.data = data.payload;
        if (!self.available) {
            self.available = true;
        }
        self.renderBody();
    }

    this.fetch = function() { // GET data
        $.get(self.service + self.method).done(self.onUpdate);
    }

    this.apply = function(container) { // Apply the element to its container
        $(container).append(function () {
            return $("<h2 />").text(self.name);
        });
        $(container).append(self.element);
    }
}

// Convenience function for instantiating a DhmObject
function dhm(duration) {
    return new DhmObject(duration);
}

// Object for handling durations in day/hour/minute format
function DhmObject(duration) {
    var duration = String(duration);
    this.time = [];
    var i, self = this;
    var dhm_pattern = /^(?!$)(?:(\d+)d)?(?:(\d+)h)?(?:(\d+)m)?$/;
    if (duration.match(/(?:\d+[dhm]){1,3}/g) != null) {
        // Get three capture groups
        this.time = duration.match(dhm_pattern).slice(1,4);
        for (i in this.time) {
            if (typeof this.time[i] === "undefined" ) {
                this.time[i] = 0;
            }
            this.time[i] = parseInt(this.time[i]);
        }
    } else if (duration.match(/^\d+$/) > 0) {
        // Days
        if (Math.floor(duration / 1440) !== 0) {
            this.time[0] = Math.floor(duration / 1440);
        } else {
            this.time[0] = 0;
        }
        // Hours
        if (Math.floor( (duration % 1440) / 60 ) !== 0) {
            this.time[1] = Math.floor((duration%1440)/60) ;
        } else {
            this.time[1] = 0;
        }
        // Minutes
        if ((duration % 1440) %60 !== 0) {
            this.time[2] = (duration % 1440) % 60;
        } else {
            this.time[2] = 0;
        }
    }

    this.asString = function() {
        var returner = "";

        if (self.time[0] > 0) {
            returner += String(self.time[0]) + "d";
        }
        if (self.time[1] > 0) {
            returner += String(self.time[1]) + "h";
        }
        if (self.time[2] > 0) {
            returner += String(self.time[2]) + "m";
        }
        // If the duration is zero, display as "0m"
        if (self.asMinutes() === "0") {
            returner += "0m";
        }

        return returner;
    }

    this.asMinutes = function() {
        return String((self.time[0] * 1440) + (self.time[1] * 60) + self.time[2]);
    }
}

$(document).ready(function(){

    // Define processing time table
    var pt = new DataTable('processing_time', 'Processing Time', '/shippingconfig/', 'processing_times', ['Name', 'Type', 'Processing Time', 'Overrides'], {
        'Name' : 'name',
        'Type' : 'type',
        'Processing Time' : 'processing_time',
        'Overrides' : 'bespoke_overrides'
    }, 'data wide-data divided-data', ['Processing Time'], function(row) {
            // Transform data for display
            // Handle overrides
            if(row.overrides_all === 1) {
                row.bespoke_overrides = "ALL";
            }
            else {
                if(row.overrides.length > 0) {
                    row.bespoke_overrides = row.overrides.join(", ");
                }
            }
            // Convert minutes to hours and minutes
            row.processing_time = dhm(row.processing_time).asString();
            return row;
    }, function(params) {
        // validate and transform parameters

        if(!params.processing_time.match(/\S/)) {
            return [false, 'Processing time is a mandatory \
                field for Processing Time, and should have a \
                days/hours/minutes format, like "3h20m", or "2d"'];
        }

        params.processing_time = params.processing_time.trim();

        if(params.processing_time.match(/^(\d+d)?(\d+h)?(\d+m)?$/)) {
            params.processing_time = dhm(params.processing_time).asMinutes();
            return [true, params];
        } else {
            return [false, 'Processing time should have a \
                days/hours/minutes format, like "3h20m", or "2d"'];
        }
    });

    pt.fetch();
    pt.apply($("#config_tables"));

    // Define WMS Priorities table
    var wp = new DataTable('wms_priorities', 'WMS Priorities', '/shippingconfig/', 'wms_priorities', ['Name', 'Type', 'Initial Priority', 'Bumped Priority', 'Bumped Interval'], {
        'Name'              : 'name',
        'Type'              : 'type',
        'Initial Priority'  : 'initial_priority',
        'Bumped Priority'   : 'bumped_priority',
        'Bumped Interval'   : 'bumped_interval'
    }, 'data wide-data divided-data', ['Initial Priority', 'Bumped Priority', 'Bumped Interval'], function(row) {
        if (row.bumped_interval != null) {
            row.bumped_interval = dhm(row.bumped_interval).asString();
        }
        return row;
    }, function(params){
        // validate and transform parameters
        if (params.initial_priority.match(/^\d+$/) == null) {
            return [false, "Initial priority is a mandatory \
                field for WMS Priorities and must contain an integer value"];
        }

        if (params.bumped_priority.match(/^(\d+|-)?$/) == null) {
            return [false, "Bumped priority must be an integer"];
        }

        if (params.bumped_priority.match(/^\s?-?\s?$/) != null) {
            // replace hyphen / whitespace with empty strong
            params.bumped_priority = "";
        }

        params.bumped_interval = params.bumped_interval.trim();

        if (params.bumped_interval.match(/^(?!$)((\d+d)?(\d+h)?(\d+m)?)$/) != null) {
            // Convert dhm format to minutes
            params.bumped_interval = dhm(params.bumped_interval).asMinutes();
        } else if (params.bumped_interval.match(/^\s?-?\s?$/) != null) {
            // replace hyphen/whitespace with empty string
            params.bumped_interval = "";
        } else {
            return [false, 'Bumped Interval should have a \
                days/hours/minutes format, like "3h20m", or "2d"'];
        }

        return [true, params];
    });
    wp.fetch();
    wp.apply($("#config_tables"));

    // Define Earliest Selection table
    var es = new DataTable('earliest_selection','Earliest Selection', '/shippingconfig/', 'earliest_selection', ['Carrier', 'Earliest Selection Time'], {'Carrier' : 'name', 'Earliest Selection Time': 'time' }, 'data wide-data divided-data', ['Earliest Selection Time'], null, function(params) {
        // validate 24hr format
        if (params.time.match(/^([01]\d|2[0-3]):[0-5]\d$/) == null) {
            return [false, 'Earliest Selection time should be a \
                24hr format time, such as "20:00"'];
        }
        return [true, params];
    });

    es.fetch();
    es.apply($("#config_tables"));


});

</script>

<div id='config_tables' style="width: 100%;">
</div>
