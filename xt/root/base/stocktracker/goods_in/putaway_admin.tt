<!-- TT BEGIN : root/base/stocktracker/goods_in/putaway_admin.tt -->
[% SET icon = {
    'plus'  => '/images/plus.gif',
    'minus' => '/images/minus.gif'
} %]

<script type="text/javascript">

// Actually expand a row, with all the UI cruft that goes with it
function expandGroup (group) {

    // Close any other that are open
    stripRows();

    // Expand the relevant group
    decorateRow( group );

    var link = $('#expand-' + group);

    // Flip the appropriate icon
    link.find('img').attr( 'src', '[% icon.minus %]' );

    // Add a handler to the icon to close it
    link.unbind('click');
    link.click( function () { stripRows(); return false; });
}

/* Add container data below a group row */
function decorateRow (group) {
    // Find the row we're talking about
    var targetRow = $('#group-' + group).first();

    // If we didn't find anything, silently return
    if ( targetRow.length < 1 ) { return; }

    // First we need to create the gaudy bauble we're displaying to the user
    var table = $('<table></table>');
    var tbody = $('<tbody></tbody>')
    table.append( tbody );

    // It'll need a header row
    table.append( $('#container-table > thead').clone() );

    // How many columns does the target row have?
    var cols = targetRow.find('td').length;

    // Create the target row and put it in
    var displayRow =
        $('<tr class="group-containers"></tr>').append(
            $('<td colspan="' + cols + '"></td>').append(
                table
            )
        );

    // Add the relevant container rows
    $('#container-table tr[data-group="' + group + '"]').each( function (i,o) {
        tbody.append( $(o).clone() );
    });

    // Add that after the target row
    targetRow.after( displayRow );
}

/* Remove all container data from group rows and flip the icons back to normal */
function stripRows () {
    $('.group-table .group-containers').remove();

    // Make sure that all the icons have a plus sign and the correct handler
    $('.expand-link').each( function (i,o) {

        // The group we're working with
        var group = $(o).attr('data-group');

        // Make sure we're showing the plus icon
        $(o).find('img').attr('src', '[% icon.plus %]');

        // Set the onclick handler
        $(o).unbind('click');
        $(o).click( function () { expandGroup( group ); return false; } );
    });
}

/* Build the PRL filter */
function buildPRLFilter() {
    var countPRL = {};
    var allPRL   = [];

    // Loop through all group rows
    $('.group-row').each( function (i,o) {
        var PRL = $(o).attr('data-prl');
        if ( PRL in countPRL ) {
            countPRL[PRL]++
        } else {
            countPRL[PRL] = 1;
            allPRL.push( PRL );
        }
    });

    // Alphabetically sort the PRL names
    allPRL.sort();

    // Add the drop-down values for each available PRL
    jQuery.each( allPRL, function(i,o) {
        $('#prl-filter').append('<option value="'+o+'">'+o+' ('+countPRL[o]+')</option>');
    });

    // Filter PRLs when the drop-down is changed
    $('#prl-filter').bind( 'change', function (e) {
        revealPRLs();
        var filterTo = $('#prl-filter').val();
        if ( filterTo ) {
            filterPRLs( filterTo );
        }
    });
}

// Shows groups from all PRLs
function revealPRLs () {
    stripRows(); // Don't want any hanging container data
    $('.group-row').show();
}
// Show groups only for a given PRL
function filterPRLs ( targetPRL ) {
    $('.group-row').each( function (i,o) {
        var PRL = $(o).attr('data-prl');
        if ( PRL != targetPRL ) {
            $(o).hide();
        }
    });
}

$(document).ready( function() {

    // Allow us to sort dates properly
    $.tablesorter.addParser({
        id: 'dd-mm-yyyy hh:mm',
        // Don't auto-match (as it could be '-' in the top row)
        is: function (s) { return false },
        format: function (s) {
            // The value we're turning the date in to
            var sort = 0;

            // Split in to date and time
            var parts = s.split(' ');
            var date = parts[0];
            var time = parts[1];

            var date_parts = date.match(/(\d{2})-(\d{2})-(\d{4})/);

            // If it's not a date, return 0
            if (! date_parts) {
                return sort;
            }
            sort += parseInt(date_parts[3] + date_parts[2] + date_parts[1] + '0000', 10);

            // Was there a time part?
            if ( ! time ) {
                return sort;
            }

            var time_parts = time.match(/(\d{2})\:(\d{2})/);
            sort += parseInt(time_parts[1] + time_parts[2], 10);
            return sort;
        },
        // set type, either numeric or text
        type: 'numeric'
    });

    // Setup the sortable columns for table with extra rows
    $(".group-tablesorter-with-delivery-without-rma").tablesorter({

        // Don't sort by the far-left expand column
        headers: {
            0: { sorter: false },
            7: { sorter: 'dd-mm-yyyy hh:mm' },
            8: { sorter: 'dd-mm-yyyy hh:mm' },
            11: { sorter: 'dd-mm-yyyy hh:mm' }
        }
    });
    $(".group-tablesorter-without-delivery-without-rma").tablesorter({

        // Don't sort by the far-left expand column
        headers: {
            0: { sorter: false },
            9: { sorter: 'dd-mm-yyyy hh:mm' }
        }
    });
    $(".group-tablesorter-with-delivery-with-rma").tablesorter({

        // Don't sort by the far-left expand column
        headers: {
            0: { sorter: false },
            7: { sorter: 'dd-mm-yyyy hh:mm' },
            8: { sorter: 'dd-mm-yyyy hh:mm' },
            12: { sorter: 'dd-mm-yyyy hh:mm' }
        }
    });
    $(".group-tablesorter-without-delivery-with-rma").tablesorter({

        // Don't sort by the far-left expand column
        headers: {
            0: { sorter: false },
            10: { sorter: 'dd-mm-yyyy hh:mm' }
        }
    });

    // Clear all subrows before sorting
    $(".group-tablesorter").bind("sortStart",function() { stripRows() });

    // Add the expand parts to each row
    stripRows();

    // Build the PRL filter box
    buildPRLFilter();

    // When clicking 'remove' on a problem group, ask user to confirm
    $('.remove-problem-form').submit(function(event) {
        if ( ! confirm("Have you taken action to resolve this issue?") ) {
            event.preventDefault();
        }
    });

});


</script>

<!-- This will get centralized when we've had this UAT'd and it settles down -->
<style>
    /* Header rows are dark grey and bold */
    .group-table thead tr th {
        background: #ccc;
        text-align: center;
        font-weight: bold;
        padding: 4px;
        cursor: pointer;
    }

    .group-table thead tr th:hover {
        background: #666;
    }

    /* Normal rows are centered, and have a border at the top */
    .group-table tbody tr td {
        text-align: center;
        border-top: 1px solid #ccc;
        padding: 4px;
    }

    .group-table .align-to-the-left {
        text-align: left;
    }

    /* Status colours */
        /* white */
    .group-table tr.highlight-group-status-in-progress td { background: #ffffff; }
        /* cream */
    .group-table tr.highlight-group-status-part-complete td { background: #ffff99; }
        /* green */
    .group-table tr.highlight-group-status-awaiting-putaway td { background: #66ff66; }
        /* red */
    .group-table tr.highlight-group-status-problem td,
    .group-table tr.highlight-group-status-failed-advice td { background: #ff6666; }


    /* The expand button */
    .group-table div {
        height: 20px;
        width: 20px;
        padding: 1px;
    }
    .group-table img {
        background: #ffffff;
        margin: auto;
        margin-top: 6px;
    }

    /* Container table indent */
    .group-table table { margin-left: 60px; }

    .group-tablesorter .headerSortDown { background: #999; }
    .group-tablesorter .headerSortUp { background: #999; }

    .section-title { margin-top: 10px }

    .nobr  { white-space: nowrap; }
</style>

<!-- We have two tables to show, a customer returns one and a normal putaway
     one. We reuse the same table structure for both, only the former has the
     upload and delivery dates hidden. We will look and claim to display either
     'pid' or 'sku' depending on the value of 'item_by'
-->
[%
    MACRO showGROUPS(
        groups,
        show_delivery_and_upload,
        show_designer,
        show_rma_number,
        show_quantity_expected,
        item_by,
        group_type
    ) BLOCK
%]
<!--
    This table structure contains just the group data. We marry this with the
    container data when the user wants it via JS. This makes our markup,
    parsing, and general sanity quite a lot better.
-->
<table class="group-table group-tablesorter group-tablesorter-with[% UNLESS show_delivery_and_upload %]out[% END %]-delivery-with[% UNLESS show_rma_number %]out[% END %]-rma" id="groups-for-[% group_type %]">
    <thead>
        <tr>
            <th><!-- Expand Button --></th>
            <th>Group</th>
            <th>Type</th>
            <th>PRL</th>
        [% IF show_delivery_and_upload %]
            <th>Delivery</th>
        [% END %]
        [% IF item_by == 'sku' %]
            <th>SKU</th>
        [% ELSIF item_by == 'pid' %]
            <th>PID</th>
        [% END %]
        [% IF show_designer %]
            <th>Designer</th>
        [% END %]
        [% IF show_delivery_and_upload %]
            <th>Delivery Date</th>
            <th>Upload Date</th>
        [% END %]
        [% IF show_rma_number %]
            <th>RMA Number</th>
        [% END %]
        [% IF show_quantity_expected %]
            <th>Qty Expected</th>
        [% END %]
            <th>Qty Scanned</th>
            <th>Last Action</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
    [% FOREACH group = groups %]

        [%# Determine the group status %]
        [% PROCESS stocktracker/goods_in/putaway_admin_group_status.inc
            containers             = group.containers
            inventory_quantity     = group.quantity_scanned
            expected_quantity      = group.quantity_expected
            group_id               = group.pgid
            putaway_prep_group_row = group.putaway_prep_group_row
            group_display_status   = 'Not Set' # Output: This is set by the PROCESSed subtemplate
            show_sku_discrepancy   = 0
        %]

        [%# Don't display groups that have not been started or are completed %]
        [% IF (group_display_status == 'Not Started') or (group_display_status == 'Completed') %]
            [% NEXT %]
        [% END %]

        [%# convert the group status to a CSS class name %]
        [% group_css_class = 'group-status-' _ group_display_status.lower.replace('\s', '-') %]

        <tr id="group-[% group.putaway_prep_group_id | html %]" class="group-row highlight-[% group_css_class | html %]" data-prl="[% group.prl | html %]">
            <!--
                Expand and hide containers link
                    The onclick action for this link, and the URL for its image
                    are set by the reset action of stripRows(), which is also
                    called on document.ready.
            -->
            <td style="padding: 0px;"><a
                id        = "expand-[% group.putaway_prep_group_id | html %]"
                data-group = "[% group.putaway_prep_group_id | html %]"
                class     = "expand-link"
                href      = "#"
                title     = "View containers associated with this group"
            ><div><img alt="Expand Row" border="0" valign="middle"/></div></a></td>

            <!-- Actual data fields -->
            <td>[% group.pgid | html %]</td>
            <td><span class="nobr">[% group.stock_process_type | html -%]</span></td>
            <td><span class="nobr">[% group.prl | html %]</span></td>
        [% IF show_delivery_and_upload %]
            <td>[% group.delivery | html %]</td>
        [% END %]
        [% IF item_by == 'sku' %]
            <td>[% group.sku | html %]</td>
        [% ELSIF item_by == 'pid' %]
            <td>[% group.pid | html %]</td>
        [% END %]
        [% IF show_designer %]
            <td>[% group.designer | html %]</td>
        [% END %]
        [% IF show_delivery_and_upload %]
            <td><span class="nobr">[% local_date(group.delivery_date, 'date_only', 1, 'naughty_local_time_zone', 1 ) || '-' | html %]</span></td>
            <td><span class="nobr">[% local_date(group.upload_date, 'date_only', 1, 'naughty_local_time_zone', 1 ) || '-' | html %]</span></td>
        [% END %]
        [% IF show_rma_number %]
            <td>[% group.rma_number | html %]</td>
        [% END %]
        [% IF show_quantity_expected %]
            <td>[% group.quantity_expected | html %]</td>
        [% END %]
            <td>[% group.quantity_scanned | html %]</td>
            <td><span class="nobr">[% local_date(group.last_action) || '-' | html %]</span></td>
            <td>
                <span class="nobr">[% group_display_status %]</span>
                [%- IF group.can_mark_resolved -%]
                <form name="remove_problem_[% group.pgid %]" class="remove-problem-form" action="/GoodsIn/PutawayPrepAdmin/RemoveProblem" method="post">
                    [% INCLUDE page_elements/forms/dbl_submit_token.tt %]
                    <input type="hidden" name="group_id" value="[% group.pgid %]" />
                    <input type="submit" name="remove" value="Remove" />
                </form>
                [%- END -%]

                [% group.show_sku_discrepancy = show_sku_discrepancy %]
            </td>
        </tr>
    [% END %]
    </tbody>
</table>
[% END %]

<p><i>Click on a column heading to sort in ascending order, and click again to
reverse the sort.</i></p>

<!-- Filtering PRL box -->
<form style="text-align: right">
    <select id="prl-filter" name="prl-filter">
        <option value="">All PRLs</option>
    </select>
</form>

[%# several data sections are traversed here: %]

[% IF customer_returns_only %]

    <h2 class="section-title">Customer Returns in Putaway Preparation</h2>
    [%# Among common columns table includes: Designer, RMA and Quantity expected %]
    [% showGROUPS( stock_returns, 0, 1, 1, 1, 'sku', 'returns' ) %]

[% ELSE %]

    <h2 class="section-title">Stock Process Groups in Putaway Preparation</h2>
    [%# Among common columns table includes: Delivery, Upload and Quantity expected %]
    [% showGROUPS( stock_normal, 1, 1, 0, 1, 'pid', 'stock-process' ) %]

    <h2 class="section-title">Stock Recodes in Putaway Preparation</h2>
    [%# Among common columns table includes: Designer and Quantity expected %]
    [% showGROUPS( stock_recodes, 0, 1, 0, 1, 'pid', 'stock-recode' ) %]

    <h2 class="section-title">Sample Returns in Putaway Preparation</h2>
    [%# Among common columns table includes: Designer, RMA and Quantity expected %]
    [% showGROUPS( sample_returns, 0, 1, 1, 1, 'sku', 'returns' ) %]

    <h2 class="section-title">Cancelled stock in Putaway Preparation</h2>
    [%# Table includes only common columns %]
    [% showGROUPS( cancelled_group, 0, 0, 0, 0, '', 'cancelled-groups' ) %]

[% END %]


<!--
    This contains the container ID. We don't ever show this directly to the
    user - instead we just steal data from it when we need it. This is handy,
    because it means we can isolate all the craziness in to the display layer.
-->
<table style="display: none" id="container-table">
    <thead>
        <tr>
            <th>Container ID</th>
            <th>Qty Scanned</th>
            <th>Operator</th>
            <th>Last Scan Time</th>
            <th>Advice Status</th>
        <tr>
    </thead>
    <tbody>
    [%# the same data sections traversed above are used here: %]
    [% all_groups = stock_normal %]
    [% all_groups = all_groups.merge( stock_recodes ) %]
    [% all_groups = all_groups.merge( stock_returns ) %]
    [% all_groups = all_groups.merge( sample_returns ) %]
    [% all_groups = all_groups.merge( stock_vouchers ) %]
    [% all_groups = all_groups.merge( cancelled_group ) %]

    [% FOREACH group = all_groups %]

    [% FOREACH container = group.containers.sort('last_scan_time') %]
        [%# Determine the container status %]
        [% PROCESS stocktracker/goods_in/putaway_admin_container_status.inc
            status_id = container.status_id
            failure_reason = container.failure_reason
            container_display_status = 'Not Set' # Output: This is set by the PROCESSed subtemplate
        %]
        <tr data-group="[% group.putaway_prep_group_id | html %]">
            <td>[% container.id | html %]</td>
            <td>[% container.quantity_scanned | html %]</td>
            <td>[% container.operator | html %]</td>
            <td>[% local_date(container.last_scan_time) || '-' | html %]</td>
            <td>[% container_display_status %]
[%- IF container.container_fault -%]
            <br /><a href="/GoodsIn/PutawayProblemResolution?container_id=[% container.id | html %]">Resolve problem</a>
[%- END %]</td>
        </tr>
        [% IF container.content %]
        <tr data-group="[% group.putaway_prep_group_id | html %]"><td colspan="5">
            <table>
                <thead>
                    <tr><th>SKU</th><th>Designer</th><th>Quantity</th></tr>
                </thead>
                <tbody>
            [% FOREACH item IN container.content %]
                <tr>
                    <td><a href="/StockControl/Inventory/Overview?product_id=[% item.product_id %]">[% item.sku %]</a></td>
                    <td>[% item.designer_name | html %]</td>
                    <td>[% item.quantity | html %]</td>
                </tr>
            [% END %]
                </tbody>
            </table>
        </td></tr>
        [% END %]
    [% END %]


        [% IF group.show_sku_discrepancy %]
            <tr data-group="[% group.putaway_prep_group_id | html %]"><td colspan="5">
                <h3 class="align-to-the-left">SKUs:</h3>
                 <table>
                    <thead>
                        <tr><th>SKU</th><th>Expected</th><th>Scanned</th></tr>
                    </thead>
                    <tbody>
                        [% variants_hash = group.putaway_prep_group_row.variants_as_hash %]
                        [% FOREACH variant_id IN group.putaway_prep_group_row.cached_expected_quantities.keys %]
                            <tr>
                                <td>[% variants_hash.$variant_id.sku %]</td>
                                <td>[% group.putaway_prep_group_row.cached_expected_quantities.$variant_id %]</td>
                                <td>[% group.putaway_prep_group_row.cached_scanned_quantities.$variant_id %]</td>
                            </tr>
                        [% END %]
                    </tbody>
                </table>
            </td></tr>
        [% END %]


    [% END %]
    </tbody>
</table>

[% IF debug %]
<br><br>
<pre>
for debug:<br>
[% USE Dumper %]

Stock process:

[% Dumper.dump(stock_normal) %]

Stock recode:

[% Dumper.dump(stock_recodes) %]

Returns:

[% Dumper.dump(stock_returns) %]

Cancelled group:

[% Dumper.dump(cancelled_group) %]

</pre>
[% END %]

<!-- TT END : root/base/stocktracker/goods_in/putaway_admin.tt -->
