.. -*- mode:rst -*-

================================
 Reports to run on PRL detabase
================================

(See also DCA-2065)

Reports about places / aisles
=============================

Currently a "place" is defined as "location id truncated two digits
after the dash"; comment/uncomment the appropriate line to change it

Show (flat) PIDs sorted by how many "places" they are stored in::

  WITH place_inventory(pid,storage_type,quantity,location,place) AS (
   SELECT SUBSTRING(sku.id FROM '#"%#"-%' FOR '#') AS pid,
          sku.storage_type as storage_type,
          quantity,
          location__id AS location,
          SUBSTRING(i.location__id FROM '#"%-__#"%' FOR '#') AS place -- two digits after the dash
          -- SUBSTRING(i.location__id FROM '#"%#"-%' FOR '#') AS place -- up to the dash
          -- i.location__id AS place -- the entire location
    FROM inventory i
    JOIN sku ON i.sku__id=sku.id
    WHERE i.quantity > 0
      AND sku.storage_type = 'Flat'
  )
  SELECT pid, COUNT(DISTINCT place), array_agg(DISTINCT place) as places
  FROM place_inventory
  GROUP BY pid
  ORDER BY COUNT(DISTINCT place) ASC
  LIMIT 10;

Same as above, but restrict to PIDs that exist in a certain "place"::

  WITH place_inventory(pid,storage_type,quantity,location,place) AS (
   SELECT SUBSTRING(sku.id FROM '#"%#"-%' FOR '#') AS pid,
          sku.storage_type as storage_type,
          quantity,
          location__id AS location,
          SUBSTRING(i.location__id FROM '#"%-__#"%' FOR '#') AS place -- two digits after the dash
          -- SUBSTRING(i.location__id FROM '#"%#"-%' FOR '#') AS place -- up to the dash
          -- i.location__id AS place -- the entire location
    FROM inventory i
    JOIN sku ON i.sku__id=sku.id
    WHERE i.quantity > 0
      AND sku.storage_type = 'Flat'
  )
  SELECT pi.pid,
         COUNT(DISTINCT pi.place),
         array_agg(DISTINCT pi.place) as places
  FROM place_inventory pi
  JOIN place_inventory pi2 ON pi2.pid=pi.pid
  WHERE pi2.place in ('024A-00') 
  GROUP BY pi.pid
  ORDER BY COUNT(DISTINCT pi.place) ASC;

Same as above, but show all locations each PID is in, instead of the
"place"::

  WITH place_inventory(pid,storage_type,quantity,location,place) AS (
   SELECT SUBSTRING(sku.id FROM '#"%#"-%' FOR '#') AS pid,
          sku.storage_type as storage_type,
          quantity,
          location__id AS location,
          SUBSTRING(i.location__id FROM '#"%-__#"%' FOR '#') AS place -- two digits after the dash
          -- SUBSTRING(i.location__id FROM '#"%#"-%' FOR '#') AS place -- up to the dash
          -- i.location__id AS place -- the entire location
    FROM inventory i
    JOIN sku ON i.sku__id=sku.id
    WHERE i.quantity > 0
      AND sku.storage_type = 'Flat'
  )
  SELECT pi.pid,
         COUNT(DISTINCT pi.location),
         array_agg(DISTINCT pi.location) as locations
  FROM place_inventory pi
  JOIN place_inventory pi2 ON pi2.pid=pi.pid
  WHERE pi2.place in ('024A-00') 
  GROUP BY pi.pid
  ORDER BY COUNT(DISTINCT pi.location) ASC;

Reports about allocations
=========================

Current allocations
-------------------

Show how many (flat) allocations are being picked::

  SELECT COUNT(DISTINCT f.id)
  FROM fulfilment f
  JOIN fulfilment_item fi ON fi.fulfilment_id=f.id
  JOIN fulfilment_status fs ON f.fulfilment_status__id=fs.id
  JOIN sku ON fi.sku_id=sku.id
  WHERE fs.status='picking_in_progress'
    AND sku.storage_type='Flat';

Restricted by PID::

  SELECT COUNT(DISTINCT f.id)
  FROM fulfilment f
  JOIN fulfilment_item fi ON f.id=fi.fulfilment_id
  JOIN fulfilment_status fs ON f.fulfilment_status__id=fs.id
  JOIN sku ON fi.sku_id=sku.id
  WHERE fs.status='picking_in_progress'
    AND sku.storage_type='Flat'
    AND SUBSTRING(fi.sku_id FROM '#"%#"-%' FOR '#') IN ('334442','334443');

(the PIDs have to be written as strings)

Grouped by PID, sorted by allocations::

  SELECT pid,status,COUNT(*)
  FROM (
   SELECT SUBSTRING(fi.sku_id FROM '#"%#"-%' FOR '#') AS pid, fs.status, f.id
   FROM fulfilment f
   JOIN fulfilment_item fi ON f.id=fi.fulfilment_id
   JOIN fulfilment_status fs ON f.fulfilment_status__id=fs.id
   JOIN sku ON fi.sku_id=sku.id
   WHERE fs.status='picking_in_progress'
     AND sku.storage_type='Flat'
  ) al
  GROUP BY pid,status
  ORDER BY pid,status,COUNT(*);

Historical allocations
----------------------

How many allocations we had (for flat products) during each hour::

  SELECT count(*), hour
  FROM (
   SELECT a.entity_id,
          EXTRACT(hour FROM a.created) AS hour
   FROM fulfilment_item fi
   JOIN sku ON fi.sku_id=sku.id
   JOIN audit a ON a.entity_type='FULFILMENT'
               AND a.entity_id::integer=fi.fulfilment_id
               AND a.property='fulfilment_status__id'
   JOIN fulfilment_status fs ON a.new_value::integer=fs.id
   WHERE fs.status IN ('picking_in_progress')
     AND sku.storage_type='Flat'
  ) fi
  GROUP BY hour
  ORDER BY COUNT(*) asc;

