#!/usr/bin/env perl
use strict;
use warnings;
use FindBin::libs;
use FindBin::libs qw( base=lib_dynamic );
use Test::Most;
use XTracker::Database qw ( xtracker_schema );
use XTracker::Config::Local qw( iws_location_name );
use XTracker::Constants             qw( $APPLICATION_OPERATOR_ID );
use XTracker::Constants::FromDB     qw(
                                          :channel_transfer_status
                                          :product_channel_transfer_status
                                          :flow_status
                                  );
use XT::JQ::DC::Receive::Product::ChannelTransfer;
use Getopt::Long;

my $p=Getopt::Long::Parser->new(
    config => [qw(
        no_auto_abbrev
        no_getopt_compat
        no_gnu_compat
        no_permute
        no_bundling
        no_ignore_case
        no_auto_version
        no_auto_help
             )],
);
$p->getoptions(
    'pid=s' => \my $pid,
    'from=s' => \my $from,
    'to=s' => \my $to,
) or die;

warn sprintf 'Going to transfer PID %d from %s to %s',
    $pid,$from,$to;

my $schema = xtracker_schema;

my $invar_location = $schema->resultset('Public::Location')->find_or_create({
    location => iws_location_name(),
    type_id => 1,
});

my $source_channel = $schema->resultset('Public::Channel')->search({
    name => { -ilike => "%$from%" },
})->slice(0,0)->single;
my $dest_channel = $schema->resultset('Public::Channel')->search({
    name => { -ilike => "%$to%" },
})->slice(0,0)->single;

die unless $source_channel && $dest_channel;

my $product = $schema->resultset('Public::Product')->find({
    id => $pid,
});

$product->get_product_channel->update({visible=>0});

warn sprintf 'Going to transfer PID %d from %s to %s',
    $product->id,$source_channel->name,$dest_channel->name;

my $jq_task = XT::JQ::DC::Receive::Product::ChannelTransfer->new({
    payload => {
        source_channel => $source_channel->id,
        dest_channel => $dest_channel->id,
        currency => '', # unused,
        operator_id => $APPLICATION_OPERATOR_ID,
        products => [ {
            product => $product->id,
            price => 0, # unused,
            # navigation => {} # not necessary
        } ],
    },
});
$jq_task->do_the_task();
