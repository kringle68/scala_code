#!/usr/bin/env perl
use NAP::policy "tt";
use Getopt::Long;
use Pod::Usage;
use FindBin::libs;
use FindBin::libs qw( base=lib_dynamic );
use XTracker::Role::WithAMQMessageFactory;

my ($sku,$quantity,$status,$reason);

{
my $p=Getopt::Long::Parser->new(
    config => [qw(
        no_auto_abbrev
        no_getopt_compat
        no_gnu_compat
        no_permute
        no_bundling
        no_ignore_case
        no_auto_version
        no_auto_help
             )],
);
my $help;
$p->getoptions(
    'sku=s' => \$sku,
    'quantity|q=i' => \$quantity,
    'status|s=s' => \$status,
    'help|h' => \$help,
) or pod2usage(2);

pod2usage(1) if $help;

pod2usage(2) unless $sku && $quantity;
}

$status ||= 'main';
$reason ||= 'STOCK OUT TO XT'; # because IWS is all shouty

my $payload = {
    sku => $sku,
    quantity_change => $quantity,
    reason => $reason,
    stock_status => $status,
};

my $factory = XTracker::Role::WithAMQMessageFactory->build_msg_factory;

$factory->transform_and_send('XT::DC::Messaging::Producer::WMS::InventoryAdjust',$payload);

__END__

=head1 NAME

send_to_transit - send the special 'to transit' C<inventory_adjust> message

=head1 SYNOPSIS

  send_inv_adj --sku 12345-012 --quantity -1

  send_inv_adj --sku 12345-012 --quantity -1 --status sample

Note that, to be accepted by XT, the quantity provided must be negative.

=cut
