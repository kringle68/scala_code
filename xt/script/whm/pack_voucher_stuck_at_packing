#!/opt/xt/xt-perl/bin/perl

# This script is a hastily written one, needs plenty of tidying up, namely:
#
# * Take code/shipment item as CL args
# * Some POD and probably comments/code tidy up
#
#

=head1 NAME

./pack_voucher_stuck_at_packing - script to fix wrongly QC'd Gift Vouchers.

=head1 DESCRIPTION

Script to fix wrongly QC'd Gift Vouchers

=head1 SYNOPSIS

    pack_voucher_stuck_at_packing --shipment_item_id <shipment_ITEM_id> --wrong_voucher_code <voucher_code>

e.g.

    # the wrong voucher code should be visible in the screenshot.

    pack_voucher_stuck_at_packing --shipment_item_id 12670263 --wrong_voucher_code GCGX9NEJ4

=cut

use NAP::policy;

# this duplication is so that it works the same way all the other scripts work
# and to work even when script attached to BAU ticket, dropped in /tmp on a box
# which is what we're doing whilst waiting for this to be released.
use FindBin::libs;
use FindBin::libs 'base=lib_dynamic';
use lib '/opt/xt/deploy/xtracker/lib';
use lib '/opt/xt/deploy/xtracker/lib_dynamic';

use XTracker::Database 'xtracker_schema';
use XTracker::Constants ':application';
use XTracker::Constants::FromDB qw{:shipment_item_status :stock_action};
use XTracker::Database::Logging 'log_stock';

use Getopt::Long;
use Pod::Usage;

my $shipment_item_id;
my $wrong_voucher_code;

GetOptions(
    "shipment_item_id=s" => \$shipment_item_id,
    "wrong_voucher_code=s" => \$wrong_voucher_code
);

pod2usage(1)
    unless (defined($shipment_item_id) && defined($wrong_voucher_code));

my $schema = xtracker_schema;
my $guard = $schema->txn_scope_guard;

my $shipment_item = $schema->resultset('Public::ShipmentItem')->find($shipment_item_id);
print "found shipment item " . $shipment_item->id . "\n";

my $voucher_code = $schema->resultset('Voucher::Code')->find({code => $wrong_voucher_code});
print "found voucher code " . $voucher_code->code . "\n";

$shipment_item->voucher_code_id( $voucher_code->id );
print "assigned voucher code id to shipment\n";
$voucher_code->assigned_code;
print "activated voucher code\n";

$shipment_item = $schema->resultset('Public::ShipmentItem')->find($shipment_item_id);
$shipment_item->unpick;
print "unpicked shipment item\n";
$shipment_item->update_status( $SHIPMENT_ITEM_STATUS__PACKED, $APPLICATION_OPERATOR_ID );
print "updated shipment item status to picked \n";

log_stock(
    $schema->storage->dbh,
    {
        variant_id  => $shipment_item->voucher_variant_id,
        action      => $STOCK_ACTION__ORDER,
        quantity    => -1,
        operator_id => $APPLICATION_OPERATOR_ID,
        notes       => $shipment_item->shipment_id,
        channel_id  => $shipment_item->shipment->get_channel->id,
    }
);
print "logged stock\n";

$guard->commit;

print "DONE\n";
