package Test::XT::DC::Messaging::Consumer::FraudQuery;

use NAP::policy "tt", 'test';
use parent "NAP::Test::Class";

=head1 NAME

Test::XT::DC::Messaging::Consumer::FraudQuery

=head1 DESCRIPTION

Simple test to check the remote DC fraud query can be consumed and produces
an answer message

=cut

use Test::XTracker::Data;
use Test::XTracker::MessageQueue;
use XTracker::Config::Local qw( config_var );
use XT::Domain::Fraud::RemoteDCQuery;

sub startup : Test( startup => 1 ) {
    my $self = shift;
    $self->SUPER::startup;

    ($self->{amq}, $self->{consumer}) = Test::XTracker::MessageQueue->new_with_app;
    $self->{inbound} = Test::XTracker::Config->messaging_config->{'Consumer::DCQuery::FraudQuery'}{routes_map}{inbound_query_queue};
    $self->{outbound} = config_var('Producer::DCQuery::FraudAnswer', 'routes_map')->{'outbound_answer_queue'};
    $self->{schema} = Test::XTracker::Data->get_schema();
}

sub setup: Test(setup) {
    my $self = shift;
    $self->SUPER::setup;
    $self->{amq}->clear_destination( $self->{inbound} );
    $self->{amq}->clear_destination( $self->{outbound} );
}

sub teardown: Test(teardown) {
    my $self    = shift;
    $self->SUPER::teardown;
    $self->{amq}->clear_destination( $self->{inbound} );
    $self->{amq}->clear_destination( $self->{outbound} );
}

=head1 TEST METHODS

=head2 test_fraud_query

=cut

sub test_fraud_query : Tests() {
    my $self = shift;

    # Send a fraud query to the consumer we're testing
    my $result = $self->{amq}->request(
        $self->{consumer},
        $self->{inbound},
        { query_id => 1,
          account_urn => 'urn:nap:account:test',
          query => 'CustomerHasGenuineOrderHistory?',
        },
        { type => 'dc_fraud_query',}
    );

    ok($result->is_success, 'Query message is consumed');

    my $rdcq = XT::Domain::Fraud::RemoteDCQuery->new({schema=>$self->{schema}});
    my $verdict
      = $rdcq->has_genuine_order_history({ account_urn => 'urn:nap:account:test' });

    # Ensure that the response message has been generated by this consumer
    $self->{amq}->assert_messages(
        { destination => $self->{outbound},
          assert_header => superhashof({ type => 'dc_fraud_answer' }),
          assert_body => superhashof({query_id => 1, answer => $verdict}),
        },
        'Answer message is correctly produced');
}

