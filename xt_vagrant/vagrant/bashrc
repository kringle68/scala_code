# source the environment
if [ -e /vagrant/xtdc/xtdc.env ];
then
    source /vagrant/xtdc/xtdc.env
fi;

# better prompt:  XTracker Dev [time: |background of jobs| (git-branch) pwd$]

# XTracker Dev = GREEN
# TIME = WHITE
# BACKGROUNDED JOBS = RED (example open vim and type Ctrl+Z)
# GIT-BRANCH = BLUE
# PWD = WHITE

export PS1="\[\e[1;32m\]XTracker Dev\[\e[0m\] [\A\$(jobs | awk '{ print \$3 }' | tr '\n' '|' | awk '{ print \"\[\033[1;31m|\]\" \$1 \"\[\033[0m\]\" }'): \[\033[1;34m\]\$(git branch 2>/dev/null | grep '*' | cut -c 3-)\[\033[0m\] \W$] "

export PATH="/opt/xt/xt-perl/bin/:$PATH"
cd /vagrant

if [ ! -e ~/nap_dev.properties ];
then

    echo -e "You have no properties file yet. Lets make one!!\n"

    echo -e "Complete the questionnaire below:"

    echo -en "Which DC? [1/2/3]: "
    read DC

    echo -en "Database host name: "
    read DB_HOST

    echo -en "Database schema name: "
    read SCHEMA_NAME

    echo -en "Email Address: "
    read EMAIL_ADDR

    echo -en "PRL Phase [0/1/2]: "
    read PRL_PHASE

    echo "Generate Makefile:"
    perl Makefile.PL

    echo "Install dependencies:"
    make install_rpm_deps

    echo "Creating blank database:"
    ./script/download_blank_db.pl -d $DC -t $SCHEMA_NAME -T $DB_HOST
    ./script/deploy/apply_db_patches.sh


    echo "Set up properties file:"
    ./script/update_test_config_noddy.pl \
        --dc $DC \
        --email $EMAIL_ADDR \
        --hosttype "XTDC$DC" \
        --db $SCHEMA_NAME \
        --host $DB_HOST \
        --temp './conf/nap_dev.properties' \
        --prl $PRL_PHASE \
        --move

    echo "Read the properties file:"
    make setup NAP_PROPERTIES_FILE=~/nap_dev.properties

    echo "Source the environment file:"
    source /vagrant/xtdc/xtdc.env

else

    echo "Welcome back to your development XT"

    ref=$(perl -lne '/^NAP_HOST_TYPE\s+(\w+)$/ && print substr $1, 2, 3' \
        ~/nap_dev.properties)
    grep -E "(${ref}_XTRACKER_DB_HOST|${ref}_XTRACKER_DB_NAME|NAP_HOST_TYPE)" \
        ~/nap_dev.properties | perl -ple 's/\s+/: /g'

fi;
